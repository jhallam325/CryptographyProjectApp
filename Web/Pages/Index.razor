@page "/"
@inject NavigationManager NavManager
<PageTitle>Index</PageTitle>

<h1>CryptoMessage</h1>

CryptoMessage will encrypt/decrypt a message using one of several algorithms from classical cryptography. These messages will not protect you from a government agency who could use cryptanalysis and break your code immediately. 

<br />
<br />

<!--Input area-->
<!--Input File-->
<input type="radio" id="inputFileRadioButton" name="inputRadioButton" value="false" @onchange="InputFileRadioButtonChanged" />
<label for="inputRadioButton">File</label>

<InputFile OnChange="LoadFiles"  />
<br />
<!--Input Text-->

<input type="radio" id="inputTextRadioButton" name="inputRadioButton" value="false" @onchange="InputTextRadioButtonChanged" />
<label for="inputRadioButton">Text</label>
<br />
<textarea id="inputTextBox" name="inputTextBox" rows="5" cols="150" @bind="inputText"></textarea>
<br />
@* <InputTextArea @bind-Value="inputText"></InputTextArea> *@
@* <EditForm> <-- I need a Model and/or EditContext here
    <InputTextArea @bind-Value="inputText"></InputTextArea>
</EditForm>
 *@<hr />

<!--Selector Area-->
<!--Algorithm Direction Radio Buttons-->
<input type="radio" id="encryptRadioButton" name="algorithmDirection" value="false" />
<label for="algorithmDirection">Encrypt</label>
<br />
<input type="radio" id="decryptRadioButton" name="algorithmDirection" value="false" />
<label for="algorithmDirection">Decrypt</label>
<br>

<!--Algorithm Choice-->
<label for="encryptionAlgorithm">Method:  </label>
<select name="encryptionAlgorithm" id="encryptionAlgorithm">
    <optgroup label="Monoalphabetic">
        <option value="shift">Shift Cipher</option>
        <option value="substitution">Substitution Cipher</option>
        <option value="permutation">Permutation Cipher</option>
    </optgroup>
    <optgroup label="Polyalphabetic">
        <option value="affine">Affine Cipher</option>
        <option value="vigenere">Vigenere Cipher</option>
        <option value="hill">Hill Cipher</option>
        <option value="autokey">Autokey Cipher</option>
        <option value="stream">Stream Cipher</option>
    </optgroup>
</select>
<br />
<!--Key Information-->
<span id="keyInformation">Key Information: </span>
<br />
<label for="key">Key:  </label>
<input type="text" name="key" />
<br />
<input type="checkbox" id="hideCharacters" name="hideCharacters" value="hideCharacters">
<label for="hideCharacters">Hide Characters</label>
<br>
<hr />

<!--Output Group-->
<!--Output File-->
<input type="radio" id="outputFileRadioButton" name="outputRadioButton" value="File" />
<label for="outputRadioButton">File</label>
<input type="text" name="output_file_name" />
<button type="button" OnClickCallback="@*https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/*@">Browse</button>
<br />
<!--Output Text-->
<input type="radio" id="outputTextRadioButton" name="outputRadioButton" value="Text" />
<label for="outputRadioButton">Text</label>
<br />
<textarea id="outputTextBox" name="outputTextBox" rows="5" cols="200"></textarea>
<br />
<button type="button" @onclick="Run">Run</button>

<EditForm EditContext="this.editContext">

    @foreach (var model in models)
    {
        <h3>@model.Value</h3>

        <h5>Check boxes</h5>
        foreach (var option in model.Options)
        {
            <div>
                <InputCheckbox @bind-Value="option.Selected" />@option.Value
            </div>
        }
        <h5>Option Select</h5>
        <div>
            <InputRadioGroup @bind-Value="model.Selected">
                @foreach (var option in model.Options)
                    {
                    <div>
                        <InputRadio Value="option.Value" /> @option.Value
                    </div>
                    }
            </InputRadioGroup>
            <div>
                Selected: @model.Selected
            </div>
        </div>
    }
</EditForm>
<button class="btn btn-dark" @onclick="OnClick">Check</button>






@code {
    private string inputText = string.Empty;
    private string outputText = string.Empty;
    private long maxFileSize = 1024 * 1000;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        using(var fileContent = new StreamReader(file.OpenReadStream(maxFileSize)))
        {
            inputText = await fileContent.ReadToEndAsync();
        }
    }

    private void InputFileRadioButtonChanged(ChangeEventArgs e) 
    {
        if ( bool.Parse((string)e.Value))
        {
            e.Value = false;
        }
        else 
        {
            e.Value = true;
        }
        inputText = e.Value.ToString();
    }

    private void InputTextRadioButtonChanged(ChangeEventArgs e)
    {
        if (bool.Parse((string)e.Value))
        {
            e.Value = false;
        }
        else
        {
            e.Value = true;
        }
        inputText = e.Value.ToString();
    }

    private void Run() 
    {
        



        NavManager.NavigateTo("/file-upload");


    }
    ///////////////////////////////////////////////////////////////////////////////////////////// https://stackoverflow.com/questions/67541036/how-to-use-radiobuttons-and-checkboxes-in-an-asp-net-blazor-page
    private EditContext editContext;

    private List<Model> models;

    protected override Task OnInitializedAsync()
    {
        models = Models;
        editContext = new EditContext(models);
        return Task.CompletedTask;
    }

    public void OnClick(MouseEventArgs e)
    {
        var x = true;
    }

    public List<Model> Models => new List<Model>()
    {
        new Model() { Value = "Fred"},
        new Model() { Value = "Jon"},
     };

    public class Model 
    {
        public string Value { get; set; }
        public string Selected { get; set; }
        public List<ModelOptions> Options { get; set; } = new List<ModelOptions>()
        {
            new ModelOptions() {Value="Tea", Selected=true},
            new ModelOptions() {Value="Coffee", Selected=false},
            new ModelOptions() {Value="Water", Selected=false},

        };
    }

    public class ModelOptions
    {
        public string Value { get; set; }
        public bool Selected
        {
            get => _Selected;
            set
            {
                _Selected = value;
            }
        }
        public bool _Selected;
    }
}