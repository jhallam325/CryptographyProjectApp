@page "/"
@inject NavigationManager NavManager
<PageTitle>Index</PageTitle>

<h1>CryptoMessage</h1>

CryptoMessage will encrypt/decrypt a message using one of several algorithms from classical cryptography. These messages will not protect you from a government agency who could use cryptanalysis and break your code immediately. 

<br />
<br />

<!--Input area-->
<!--Input File-->
<input type="radio" id="inputFileRadioButton" name="inputRadioButton" value="File" />
<label for="inputRadioButton">File</label>
<input type="text" name="input_file_name" @bind-value="filePath" />

<InputFile OnChange="LoadFiles" multiple />
<br />
<!--Input Text-->
<input type="radio" id="inputTextRadioButton" name="inputRadioButton" value="Text" />
<label for="inputRadioButton">Text</label>
<br />
@* <textarea id="inputTextBox" name="inputTextBox" rows="5" cols="200" @bind-Value="inputText"></textarea> *@
<br />
<InputTextArea @bind-Value="inputText"></InputTextArea>
<hr />

<!--Selector Area-->
<!--Algorithm Direction Radio Buttons-->
<input type="radio" id="encryptRadioButton" name="algorithmDirection" value="Encrypt" />
<label for="algorithmDirection">Encrypt</label>
<br />
<input type="radio" id="decryptRadioButton" name="algorithmDirection" value="Decrypt" />
<label for="algorithmDirection">Decrypt</label>
<br>

<!--Algorithm Choice-->
<label for="encryptionAlgorithm">Method:  </label>
<select name="encryptionAlgorithm" id="encryptionAlgorithm">
    <optgroup label="Monoalphabetic">
        <option value="shift">Shift Cipher</option>
        <option value="substitution">Substitution Cipher</option>
        <option value="permutation">Permutation Cipher</option>
    </optgroup>
    <optgroup label="Polyalphabetic">
        <option value="affine">Affine Cipher</option>
        <option value="vigenere">Vigenere Cipher</option>
        <option value="hill">Hill Cipher</option>
        <option value="autokey">Autokey Cipher</option>
        <option value="stream">Stream Cipher</option>
    </optgroup>
</select>
<br />
<!--Key Information-->
<span id="keyInformation">Key Information: </span>
<br />
<label for="key">Key:  </label>
<input type="text" name="key" />
<br />
<input type="checkbox" id="hideCharacters" name="hideCharacters" value="hideCharacters">
<label for="hideCharacters">Hide Characters</label>
<br>
<hr />

<!--Output Group-->
<!--Output File-->
<input type="radio" id="outputFileRadioButton" name="outputRadioButton" value="File" />
<label for="outputRadioButton">File</label>
<input type="text" name="output_file_name" />
<button type="button" OnClickCallback="@*https://blog.stevensanderson.com/2019/09/13/blazor-inputfile/*@">Browse</button>
<br />
<!--Output Text-->
<input type="radio" id="outputTextRadioButton" name="outputRadioButton" value="Text" />
<label for="outputRadioButton">Text</label>
<br />
<textarea id="outputTextBox" name="outputTextBox" rows="5" cols="200"></textarea>
<br />
<button type="button" @onclick="Run">Run</button>






@code {
    private string filePath = string.Empty;
    private string fileContent = string.Empty;
    private string inputText = string.Empty;
    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    // private void inputFileBrowseButton_Click()
    // {

    // }
    private void LoadFiles(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        filePath = file.Name;
        using(var fileContent = new StreamReader(file.OpenReadStream(maxFileSize)))
        {
            inputText = fileContent.ReadToEnd();
        }

    }

    private void Run() 
    {
        NavManager.NavigateTo("/file-upload");
    }
}